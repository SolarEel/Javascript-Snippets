class PaginationHelper {
	constructor(collection, itemsPerPage) {
	// The constructor takes in an array of items and a integer indicating how many
	// items fit within a single page
    this.collection=collection;
    this.itemsPerPage=itemsPerPage;
	}
	itemCount() {
	// returns the number of items within the entire collection
    return(this.collection.length);
	}
	pageCount() {
	// returns the number of pages
    return(Math.ceil(this.collection.length/this.itemsPerPage))//Math.ceil rounds up to nearest number, because there's no such thing
    //as decimal pages
    }
	pageItemCount(pageIndex){
	//Returns nยบ of items on the current page. page_index is zero based.
	//this method should return -1 for pageIndex values that are out of range
    let a=Math.floor(this.collection.length/this.itemsPerPage);//Variable of rounded down page number
    if(pageIndex<0||this.collection.length==0||pageIndex>a){return(-1)};//this works due to indexes starting on 0
    if(pageIndex<a){return(this.itemsPerPage);}
    if(pageIndex==a){
      if(this.collection.length%this.itemsPerPage==0){return(-1)};//If it all fits in the first(0) page
      return(this.collection.length%this.itemsPerPage)//The last page will have the remainder
                    }
	}
	pageIndex(itemIndex) {
  //Note!: this finds the page that the indexed item is on, not the index value of an object
	//Should return -1 for itemIndex values that are out of range
    let a=Math.ceil(this.collection.length/this.itemsPerPage);//Number of pages
    let b=itemIndex//Decreasing counter
    let c=0//Increasing counter
    if(itemIndex>this.collection.length-1||itemIndex<0||this.collection.length==0){return -1};//Bounds check.
    while(b>=this.itemsPerPage){
      b=b-this.itemsPerPage;
      c++;
    };
    return c;
	}
}
